"""
–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –ø–æ –º–∏–≥—Ä–∞—Ü–∏–∏ –ü–û
"""

import pandas as pd

def tabs(tab1, tab2, tab3, tab4, st, processor, optimizer, uploaded_file, exporter):

    with tab1:
        st.subheader("–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ª–Ω –º–∏–≥—Ä–∞—Ü–∏–∏ (—ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º)")
        st.markdown("""
        –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ª–Ω –∏ –ª–∏–º–∏—Ç—ã –ü–û –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–∞–∂–¥–æ–π –≤–æ–ª–Ω–µ.
        
        **–≠–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º** –±—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏—Ç —Ö–æ—Ä–æ—à–µ–µ —Ä–µ—à–µ–Ω–∏–µ, –≤—ã–±–∏—Ä–∞—è –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –ü–û.
        
        ‚ö†Ô∏è *–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –≠–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –Ω–æ –¥–∞–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ö–æ—Ä–æ—à–µ–µ —Ä–µ—à–µ–Ω–∏–µ –∑–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è.*
        """)

        col1, col2 = st.columns([1, 2])

        with col1:
            num_waves_greedy = st.number_input(
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ª–Ω",
                min_value=1,
                max_value=10,
                value=3,
                help="–°–∫–æ–ª—å–∫–æ –≤–æ–ª–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è",
                key="num_waves_greedy"
            )

        st.markdown("**–õ–∏–º–∏—Ç—ã –ü–û –¥–ª—è –∫–∞–∂–¥–æ–π –≤–æ–ª–Ω—ã:**")

        wave_limits_greedy = []
        cols = st.columns(min(num_waves_greedy, 3))
        for i in range(num_waves_greedy):
            col_idx = i % 3
            with cols[col_idx]:
                limit = st.number_input(
                    f"–í–æ–ª–Ω–∞ {i+1}",
                    min_value=1,
                    max_value=processor.total_software,
                    value=min(100, processor.total_software),
                    key=f"wave_limit_greedy_{i}"
                )
                wave_limits_greedy.append(limit)

        if st.button("üöÄ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤–æ–ª–Ω—ã (—ç–≤—Ä–∏—Å—Ç–∏–∫–∞)", type="primary", key="calc_greedy"):
            with st.spinner("–†–∞—Å—á—ë—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –≤–æ–ª–Ω –º–∏–≥—Ä–∞—Ü–∏–∏ (—ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º)..."):
                results = optimizer.calculate_waves(wave_limits_greedy, use_ilp=False)
                st.session_state.wave_results_greedy = results
                st.success("‚úì –†–∞—Å—á—ë—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!")
                st.rerun()

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if 'wave_results_greedy' in st.session_state:
            results = st.session_state.wave_results_greedy

            st.markdown("---")
            st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á—ë—Ç–∞")

            # –¢–∞–±–ª–∏—Ü–∞ –ø–æ –≤–æ–ª–Ω–∞–º
            wave_stats = []
            cumulative_arms = 0
            cumulative_software = 0

            for i, wave_data in enumerate(results['waves']):
                cumulative_arms += wave_data['arms_migrated']
                cumulative_software += wave_data['software_selected']

                wave_stats.append({
                    '–í–æ–ª–Ω–∞': str(i + 1),  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
                    '–õ–∏–º–∏—Ç –ü–û': wave_limits_greedy[i],
                    '–í—ã–±—Ä–∞–Ω–æ –ü–û': wave_data['software_selected'],
                    '–ê–†–ú –≤ –≤–æ–ª–Ω–µ': wave_data['arms_migrated'],
                    '–ê–†–ú –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ': cumulative_arms
                })

            # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
            wave_stats.append({
                '–í–æ–ª–Ω–∞': '–í—Å–µ–≥–æ',
                '–õ–∏–º–∏—Ç –ü–û': sum(wave_limits_greedy),
                '–í—ã–±—Ä–∞–Ω–æ –ü–û': cumulative_software,
                '–ê–†–ú –≤ –≤–æ–ª–Ω–µ': None,  # None –≤–º–µ—Å—Ç–æ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
                '–ê–†–ú –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ': cumulative_arms
            })

            st.dataframe(
                pd.DataFrame(wave_stats),
                width="stretch",
                hide_index=True
            )

            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
            col1, col2 = st.columns(2)

            with col1:
                st.markdown("**–ü–æ–∫—Ä—ã—Ç–∏–µ –ê–†–ú**")
                coverage_pct = (cumulative_arms / processor.total_arms) * 100
                st.progress(cumulative_arms / processor.total_arms)
                st.metric(
                    "–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç–∏—è",
                    f"{coverage_pct:.1f}%",
                    f"{cumulative_arms} –∏–∑ {processor.total_arms} –ê–†–ú"
                )

            with col2:
                st.markdown("**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ü–û**")
                software_pct = (cumulative_software / processor.total_software) * 100
                st.progress(cumulative_software / processor.total_software)
                st.metric(
                    "–ü–û –≤ –ø–ª–∞–Ω–µ",
                    f"{software_pct:.1f}%",
                    f"{cumulative_software} –∏–∑ {processor.total_software} –ü–û"
                )

            # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≤–æ–ª–Ω–∞–º
            st.markdown("---")
            st.subheader("üìã –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≤–æ–ª–Ω–∞–º")
            
            for i, wave_data in enumerate(results['waves']):
                wave_num = wave_data['wave_number']
                with st.expander(f"üåä –í–æ–ª–Ω–∞ {wave_num} - {wave_data['software_selected']} –ü–û, {wave_data['arms_migrated']} –ê–†–ú"):
                    # –ö–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤–≤–µ—Ä—Ö—É
                    col_btn1, col_btn2 = st.columns(2)
                    
                    with col_btn1:
                        # –≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ –ü–û
                        tested_software_df = st.session_state.get('tested_software_df', None)
                        tested_software_column = st.session_state.get('tested_software_column', None)
                        software_family_column = st.session_state.get('software_family_column', None)
                        output_sw = exporter.create_software_export(
                            wave_data['software_list'],
                            tested_software_df,
                            tested_software_column,
                            processor.original_df,
                            processor.software_column,
                            software_family_column,
                            f'–í–æ–ª–Ω–∞ {wave_num}'
                        )
                        
                        st.download_button(
                            label=f"üì¶ –°–∫–∞—á–∞—Ç—å –ü–û –≤–æ–ª–Ω—ã {wave_num}",
                            data=output_sw,
                            file_name=f"wave_{wave_num}_software_heuristic.xlsx",
                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                            key=f"download_sw_{wave_num}_greedy",
                            width="stretch"
                        )
                    
                    with col_btn2:
                        # –≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ –ê–†–ú–æ–≤
                        output_arms = exporter.create_arms_export(
                            wave_data['arms_list'],
                            f'–í–æ–ª–Ω–∞ {wave_num}'
                        )
                        
                        st.download_button(
                            label=f"üë• –°–∫–∞—á–∞—Ç—å –ê–†–ú –≤–æ–ª–Ω—ã {wave_num}",
                            data=output_arms,
                            file_name=f"wave_{wave_num}_arms_heuristic.xlsx",
                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                            key=f"download_arms_{wave_num}_greedy",
                            width="stretch"
                        )
                    
                    st.markdown("---")
                    
                    # –°–ø–∏—Å–∫–∏
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.markdown(f"**–ü–û –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ({wave_data['software_selected']})**")
                        software_list = sorted(wave_data['software_list'])
                        for j, software in enumerate(software_list, 1):
                            st.text(f"{j}. {software}")
                    
                    with col2:
                        st.markdown(f"**–ú–∏–≥—Ä–∏—Ä—É—é—â–∏–µ –ê–†–ú ({wave_data['arms_migrated']})**")
                        arms_list = sorted(wave_data['arms_list'])
                        for j, arm in enumerate(arms_list, 1):
                            st.text(f"{j}. {arm}")

            # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
            st.markdown("---")
            col_export1, col_export2 = st.columns(2)
            
            with col_export1:
                if st.button("üíæ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Excel", key="export_greedy", width="stretch"):
                    with st.spinner("–°–æ–∑–¥–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞..."):
                        tested_software_df = st.session_state.get('tested_software_df', None)
                        tested_software_column = st.session_state.get('tested_software_column', None)
                        software_family_column = st.session_state.get('software_family_column', None)
                        excel_buffer = exporter.export_to_excel(results, uploaded_file.name, tested_software_df, tested_software_column, software_family_column)
                        st.session_state.excel_buffer_greedy = excel_buffer
                        st.session_state.show_download_greedy = True

                if st.session_state.get('show_download_greedy', False):
                    st.download_button(
                        label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å migration_plan_result_heuristic.xlsx",
                        data=st.session_state.excel_buffer_greedy,
                        file_name="migration_plan_result_heuristic.xlsx",
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                        key="download_btn_greedy"
                    )
            
            with col_export2:
                if st.button("üóÑÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö", key="export_db_greedy", width="stretch"):
                    # –°–æ–∑–¥–∞–µ–º Excel –±—É—Ñ–µ—Ä, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
                    if 'excel_buffer_greedy' not in st.session_state:
                        with st.spinner("–°–æ–∑–¥–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞..."):
                            tested_software_df = st.session_state.get('tested_software_df', None)
                            tested_software_column = st.session_state.get('tested_software_column', None)
                            software_family_column = st.session_state.get('software_family_column', None)
                            excel_buffer = exporter.export_to_excel(results, uploaded_file.name, tested_software_df, tested_software_column, software_family_column)
                            st.session_state.excel_buffer_greedy = excel_buffer
                    
                    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                    from modal_db import show_db_export_modal
                    import os
                    from dotenv import load_dotenv
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
                    load_dotenv()
                    
                    # –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
                    def export_callback(excel_buffer, schema, table, user, password, if_exists):
                        host = os.getenv('DB_HOST', 'localhost')
                        port = os.getenv('DB_PORT', '5432')
                        database = os.getenv('DB_NAME', 'postgres')
                        exporter.export_excel_to_database(
                            excel_buffer=excel_buffer,
                            schema=schema,
                            table=table,
                            user=user,
                            password=password,
                            host=host,
                            port=port,
                            database=database,
                            if_exists=if_exists
                        )
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                    default_schema = os.getenv('DB_SCHEMA', 'public')
                    show_db_export_modal(
                        excel_buffer=st.session_state.excel_buffer_greedy,
                        filename="migration_plan_result_heuristic.xlsx",
                        on_export_callback=export_callback,
                        default_schema=default_schema
                    )

    with tab2:
        st.subheader("–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ª–Ω –º–∏–≥—Ä–∞—Ü–∏–∏ (—Ç–æ—á–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º)")
        st.markdown("""
        –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ª–Ω –∏ –ª–∏–º–∏—Ç—ã –ü–û –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–∞–∂–¥–æ–π –≤–æ–ª–Ω–µ.
        
        **–¢–æ—á–Ω—ã–π ILP –∞–ª–≥–æ—Ä–∏—Ç–º** –Ω–∞—Ö–æ–¥–∏—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –ê–†–ú –ø—Ä–∏ –∑–∞–¥–∞–Ω–Ω—ã—Ö –ª–∏–º–∏—Ç–∞—Ö –ü–û.
        
        ‚úÖ *–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ: –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫: –ú–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –º–µ–¥–ª–µ–Ω–Ω–µ–µ –Ω–∞ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö.*
        
        ‚ö†Ô∏è **–ö–æ–Ω—Ç—Ä–æ–ª—å –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã:** –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º –¥–æ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è.
        –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ –ª—É—á—à–µ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç –±—ã—Ç—å **–Ω–µ–æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º** 
        (—Ç.–µ. –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è –º–∞–∫—Å–∏–º—É–º –º–∏–≥—Ä–∏—Ä—É—é—â–∏—Ö –ê–†–ú–æ–≤ –ø—Ä–∏ –∑–∞–¥–∞–Ω–Ω–æ–º –ª–∏–º–∏—Ç–µ –ü–û).
        """)

        col1, col2 = st.columns([1, 2])

        with col1:
            num_waves_ilp = st.number_input(
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ª–Ω",
                min_value=1,
                max_value=10,
                value=3,
                help="–°–∫–æ–ª—å–∫–æ –≤–æ–ª–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è",
                key="num_waves_ilp"
            )
            
            time_limit_ilp = st.number_input(
                "–õ–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ (—Å–µ–∫)",
                min_value=0,
                max_value=13600,
                value=300,
                help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Ä–µ—à–∞—Ç–µ–ª—è –¥–ª—è –∫–∞–∂–¥–æ–π –≤–æ–ª–Ω—ã (0 = –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è). –ü—Ä–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Ä–µ—à–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º.",
                key="time_limit_ilp"
            )

        st.markdown("**–õ–∏–º–∏—Ç—ã –ü–û –¥–ª—è –∫–∞–∂–¥–æ–π –≤–æ–ª–Ω—ã:**")

        wave_limits_ilp = []
        cols = st.columns(min(num_waves_ilp, 3))
        for i in range(num_waves_ilp):
            col_idx = i % 3
            with cols[col_idx]:
                limit = st.number_input(
                    f"–í–æ–ª–Ω–∞ {i+1}",
                    min_value=1,
                    max_value=processor.total_software,
                    value=min(100, processor.total_software),
                    key=f"wave_limit_ilp_{i}"
                )
                wave_limits_ilp.append(limit)

        if st.button("üöÄ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤–æ–ª–Ω—ã (—Ç–æ—á–Ω—ã–π)", type="primary", key="calc_ilp"):
            with st.spinner("–†–∞—Å—á—ë—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –≤–æ–ª–Ω –º–∏–≥—Ä–∞—Ü–∏–∏ (—Ç–æ—á–Ω—ã–π ILP –∞–ª–≥–æ—Ä–∏—Ç–º)..."):
                time_limit_value = time_limit_ilp if time_limit_ilp > 0 else None
                results = optimizer.calculate_waves(wave_limits_ilp, use_ilp=True, time_limit=time_limit_value)
                st.session_state.wave_results_ilp = results
                st.success("‚úì –†–∞—Å—á—ë—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!")
                st.rerun()

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if 'wave_results_ilp' in st.session_state:
            results = st.session_state.wave_results_ilp

            st.markdown("---")
            st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á—ë—Ç–∞")

            # –¢–∞–±–ª–∏—Ü–∞ –ø–æ –≤–æ–ª–Ω–∞–º
            wave_stats = []
            cumulative_arms = 0
            cumulative_software = 0

            for i, wave_data in enumerate(results['waves']):
                cumulative_arms += wave_data['arms_migrated']
                cumulative_software += wave_data['software_selected']

                wave_stats.append({
                    '–í–æ–ª–Ω–∞': str(i + 1),  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
                    '–õ–∏–º–∏—Ç –ü–û': wave_limits_ilp[i],
                    '–í—ã–±—Ä–∞–Ω–æ –ü–û': wave_data['software_selected'],
                    '–ê–†–ú –≤ –≤–æ–ª–Ω–µ': wave_data['arms_migrated'],
                    '–ê–†–ú –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ': cumulative_arms
                })

            # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
            wave_stats.append({
                '–í–æ–ª–Ω–∞': '–í—Å–µ–≥–æ',
                '–õ–∏–º–∏—Ç –ü–û': sum(wave_limits_ilp),
                '–í—ã–±—Ä–∞–Ω–æ –ü–û': cumulative_software,
                '–ê–†–ú –≤ –≤–æ–ª–Ω–µ': None,  # None –≤–º–µ—Å—Ç–æ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
                '–ê–†–ú –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ': cumulative_arms
            })

            st.dataframe(
                pd.DataFrame(wave_stats),
                width="stretch",
                hide_index=True
            )

            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
            col1, col2 = st.columns(2)

            with col1:
                st.markdown("**–ü–æ–∫—Ä—ã—Ç–∏–µ –ê–†–ú**")
                coverage_pct = (cumulative_arms / processor.total_arms) * 100
                st.progress(cumulative_arms / processor.total_arms)
                st.metric(
                    "–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç–∏—è",
                    f"{coverage_pct:.1f}%",
                    f"{cumulative_arms} –∏–∑ {processor.total_arms} –ê–†–ú"
                )

            with col2:
                st.markdown("**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ü–û**")
                software_pct = (cumulative_software / processor.total_software) * 100
                st.progress(cumulative_software / processor.total_software)
                st.metric(
                    "–ü–û –≤ –ø–ª–∞–Ω–µ",
                    f"{software_pct:.1f}%",
                    f"{cumulative_software} –∏–∑ {processor.total_software} –ü–û"
                )

            # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≤–æ–ª–Ω–∞–º
            st.markdown("---")
            st.subheader("üìã –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≤–æ–ª–Ω–∞–º")
            
            for i, wave_data in enumerate(results['waves']):
                wave_num = wave_data['wave_number']
                with st.expander(f"üåä –í–æ–ª–Ω–∞ {wave_num} - {wave_data['software_selected']} –ü–û, {wave_data['arms_migrated']} –ê–†–ú"):
                    # –ö–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤–≤–µ—Ä—Ö—É
                    col_btn1, col_btn2 = st.columns(2)
                    
                    with col_btn1:
                        # –≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ –ü–û
                        tested_software_df = st.session_state.get('tested_software_df', None)
                        tested_software_column = st.session_state.get('tested_software_column', None)
                        software_family_column = st.session_state.get('software_family_column', None)
                        output_sw = exporter.create_software_export(
                            wave_data['software_list'],
                            tested_software_df,
                            tested_software_column,
                            processor.original_df,
                            processor.software_column,
                            software_family_column,
                            f'–í–æ–ª–Ω–∞ {wave_num}'
                        )
                        
                        st.download_button(
                            label=f"üì¶ –°–∫–∞—á–∞—Ç—å –ü–û –≤–æ–ª–Ω—ã {wave_num}",
                            data=output_sw,
                            file_name=f"wave_{wave_num}_software_ilp.xlsx",
                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                            key=f"download_sw_{wave_num}_ilp",
                            width="stretch"
                        )
                    
                    with col_btn2:
                        # –≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ –ê–†–ú–æ–≤
                        output_arms = exporter.create_arms_export(
                            wave_data['arms_list'],
                            f'–í–æ–ª–Ω–∞ {wave_num}'
                        )
                        
                        st.download_button(
                            label=f"üë• –°–∫–∞—á–∞—Ç—å –ê–†–ú –≤–æ–ª–Ω—ã {wave_num}",
                            data=output_arms,
                            file_name=f"wave_{wave_num}_arms_ilp.xlsx",
                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                            key=f"download_arms_{wave_num}_ilp",
                            width="stretch"
                        )
                    
                    st.markdown("---")
                    
                    # –°–ø–∏—Å–∫–∏
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.markdown(f"**–ü–û –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ({wave_data['software_selected']})**")
                        software_list = sorted(wave_data['software_list'])
                        for j, software in enumerate(software_list, 1):
                            st.text(f"{j}. {software}")
                    
                    with col2:
                        st.markdown(f"**–ú–∏–≥—Ä–∏—Ä—É—é—â–∏–µ –ê–†–ú ({wave_data['arms_migrated']})**")
                        arms_list = sorted(wave_data['arms_list'])
                        for j, arm in enumerate(arms_list, 1):
                            st.text(f"{j}. {arm}")

            # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
            st.markdown("---")
            col_export1, col_export2 = st.columns(2)
            
            with col_export1:
                if st.button("üíæ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Excel", key="export_ilp", width="stretch"):
                    with st.spinner("–°–æ–∑–¥–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞..."):
                        tested_software_df = st.session_state.get('tested_software_df', None)
                        tested_software_column = st.session_state.get('tested_software_column', None)
                        software_family_column = st.session_state.get('software_family_column', None)
                        excel_buffer = exporter.export_to_excel(results, uploaded_file.name, tested_software_df, tested_software_column, software_family_column)
                        st.session_state.excel_buffer_ilp = excel_buffer
                        st.session_state.show_download_ilp = True

                if st.session_state.get('show_download_ilp', False):
                    st.download_button(
                        label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å migration_plan_result_ilp.xlsx",
                        data=st.session_state.excel_buffer_ilp,
                        file_name="migration_plan_result_ilp.xlsx",
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                        key="download_btn_ilp"
                    )
            
            with col_export2:
                if st.button("üóÑÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö", key="export_db_ilp", width="stretch"):
                    # –°–æ–∑–¥–∞–µ–º Excel –±—É—Ñ–µ—Ä, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
                    if 'excel_buffer_ilp' not in st.session_state:
                        with st.spinner("–°–æ–∑–¥–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞..."):
                            tested_software_df = st.session_state.get('tested_software_df', None)
                            tested_software_column = st.session_state.get('tested_software_column', None)
                            software_family_column = st.session_state.get('software_family_column', None)
                            excel_buffer = exporter.export_to_excel(results, uploaded_file.name, tested_software_df, tested_software_column, software_family_column)
                            st.session_state.excel_buffer_ilp = excel_buffer
                    
                    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                    from modal_db import show_db_export_modal
                    import os
                    from dotenv import load_dotenv
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
                    load_dotenv()
                    
                    # –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
                    def export_callback(excel_buffer, schema, table, user, password, if_exists):
                        host = os.getenv('DB_HOST', 'localhost')
                        port = os.getenv('DB_PORT', '5432')
                        database = os.getenv('DB_NAME', 'postgres')
                        exporter.export_excel_to_database(
                            excel_buffer=excel_buffer,
                            schema=schema,
                            table=table,
                            user=user,
                            password=password,
                            host=host,
                            port=port,
                            database=database,
                            if_exists=if_exists
                        )
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                    default_schema = os.getenv('DB_SCHEMA', 'public')
                    show_db_export_modal(
                        excel_buffer=st.session_state.excel_buffer_ilp,
                        filename="migration_plan_result_ilp.xlsx",
                        on_export_callback=export_callback,
                        default_schema=default_schema
                    )

    with tab3:
        st.subheader("–†–∞—Å—á—ë—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ü–û –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ N –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º)")
        st.markdown("""
        –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∏ **—ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º** –±—ã—Å—Ç—Ä–æ –Ω–∞–π–¥—ë—Ç –Ω–∞–±–æ—Ä –ü–û, 
        –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫—Ä—ã–≤–∞–µ—Ç –ª—é–±—ã—Ö N –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –≤–∞—à–µ–π –±–∞–∑—ã, –∏ –ø–æ—Å—Ç–∞—Ä–∞–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º.
        
        ‚ö†Ô∏è *–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –≠–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –Ω–æ –¥–∞–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ö–æ—Ä–æ—à–µ–µ —Ä–µ—à–µ–Ω–∏–µ –∑–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è.*
        """)

        col1, col2 = st.columns([1, 2])

        with col1:
            target_users_greedy = st.number_input(
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è",
                min_value=1,
                max_value=processor.total_arms,
                value=min(100, processor.total_arms),
                help="–°–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω—É–∂–Ω–æ –ø–æ–∫—Ä—ã—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –ü–û",
                key="target_users_greedy"
            )

        if st.button("üîç –ù–∞–π—Ç–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ü–û (—ç–≤—Ä–∏—Å—Ç–∏–∫–∞)", type="primary", key="find_min_software_greedy"):
            with st.spinner(f"–ü–æ–∏—Å–∫ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –ü–û –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è {target_users_greedy} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º)..."):
                min_software, covered_arms = optimizer.find_minimum_software_for_coverage(
                    target_arms_count=target_users_greedy,
                    use_ilp=False
                )
                
                st.session_state.min_coverage_results_greedy = {
                    'target_users': target_users_greedy,
                    'software_set': min_software,
                    'covered_arms': covered_arms,
                    'software_count': len(min_software),
                    'actual_coverage': len(covered_arms)
                }
                st.success("‚úì –†–∞—Å—á—ë—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!")
                st.rerun()

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if 'min_coverage_results_greedy' in st.session_state:
            results = st.session_state.min_coverage_results_greedy

            st.markdown("---")
            st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á—ë—Ç–∞")

            col1, col2, col3 = st.columns(3)

            with col1:
                st.metric(
                    "–¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ê–†–ú",
                    results['target_users']
                )

            with col2:
                st.metric(
                    "–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ü–û –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è",
                    results['software_count']
                )

            with col3:
                st.metric(
                    "–§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫—Ä—ã—Ç–æ –ê–†–ú",
                    results['actual_coverage']
                )

            # –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç–∏—è
            coverage_pct = (results['actual_coverage'] / processor.total_arms) * 100
            st.markdown("**–ü–æ–∫—Ä—ã—Ç–∏–µ –æ—Ç –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞ –ê–†–ú**")
            st.progress(results['actual_coverage'] / processor.total_arms)
            st.info(f"üìà {coverage_pct:.1f}% –æ—Ç –≤—Å–µ—Ö –ê–†–ú ({results['actual_coverage']} –∏–∑ {processor.total_arms})")

            # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            efficiency = results['actual_coverage'] / results['software_count'] if results['software_count'] > 0 else 0
            st.markdown("**–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å**")
            st.success(f"üéØ –í —Å—Ä–µ–¥–Ω–µ–º {efficiency:.1f} –ê–†–ú –Ω–∞ –æ–¥–Ω–æ –ü–û")

            # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            st.markdown("---")
            st.subheader("üìã –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
            
            # –ö–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤–≤–µ—Ä—Ö—É
            col_btn1, col_btn2 = st.columns(2)
            
            with col_btn1:
                # –≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ –ü–û
                tested_software_df = st.session_state.get('tested_software_df', None)
                tested_software_column = st.session_state.get('tested_software_column', None)
                software_family_column = st.session_state.get('software_family_column', None)
                output_sw = exporter.create_software_export(
                    list(results['software_set']),
                    tested_software_df,
                    tested_software_column,
                    processor.original_df,
                    processor.software_column,
                    software_family_column,
                    '–ü–û'
                )
                
                st.download_button(
                    label="üì¶ –°–∫–∞—á–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ü–û",
                    data=output_sw,
                    file_name="n_users_software_heuristic.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    key="download_sw_n_users_greedy",
                    width="stretch"
                )
            
            with col_btn2:
                # –≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ –ê–†–ú–æ–≤
                output_arms = exporter.create_arms_export(
                    list(results['covered_arms']),
                    '–ê–†–ú'
                )
                
                st.download_button(
                    label="üë• –°–∫–∞—á–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ê–†–ú",
                    data=output_arms,
                    file_name="n_users_arms_heuristic.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    key="download_arms_n_users_greedy",
                    width="stretch"
                )
            
            st.markdown("---")
            
            # –°–ø–∏—Å–∫–∏ –≤ expand–µ—Ä–µ
            with st.expander("üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–∫–∏ –ü–û –∏ –ê–†–ú"):
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown(f"**–ü–û –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ({results['software_count']})**")
                    software_list = sorted(list(results['software_set']))
                    for i, software in enumerate(software_list, 1):
                        st.text(f"{i}. {software}")
                
                with col2:
                    st.markdown(f"**–ü–æ–∫—Ä—ã—Ç—ã–µ –ê–†–ú ({results['actual_coverage']})**")
                    arms_list = sorted(list(results['covered_arms']))
                    for i, arm in enumerate(arms_list, 1):
                        st.text(f"{i}. {arm}")

            # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
            st.markdown("---")
            col_export1, col_export2 = st.columns(2)
            
            with col_export1:
                if st.button("üíæ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –≤ Excel", key="export_min_coverage_greedy", width="stretch"):
                    with st.spinner("–°–æ–∑–¥–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞..."):
                        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ, —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–º —Å export_to_excel
                        export_results = {
                            'waves': [{
                                'wave_number': 1,
                                'software_selected': results['software_count'],
                                'software_list': list(results['software_set']),
                                'arms_migrated': results['actual_coverage'],
                                'arms_list': list(results['covered_arms'])
                            }],
                            'total_tested_software': results['software_count'],
                            'total_migrated_arms': results['actual_coverage'],
                            'software_wave_map': {sw: 1 for sw in results['software_set']},
                            'arm_wave_map': {arm: 1 for arm in results['covered_arms']},
                            'tested_software': results['software_set'],
                            'migrated_arms': results['covered_arms']
                        }
                        
                        tested_software_df = st.session_state.get('tested_software_df', None)
                        tested_software_column = st.session_state.get('tested_software_column', None)
                        software_family_column = st.session_state.get('software_family_column', None)
                        excel_buffer = exporter.export_to_excel(export_results, uploaded_file.name, tested_software_df, tested_software_column, software_family_column)
                        st.session_state.excel_buffer_n_users_greedy = excel_buffer
                        st.session_state.show_download_n_users_greedy = True

                if st.session_state.get('show_download_n_users_greedy', False):
                    st.download_button(
                        label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å migration_n_users_heuristic.xlsx",
                        data=st.session_state.excel_buffer_n_users_greedy,
                        file_name="migration_n_users_heuristic.xlsx",
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                        key="download_btn_n_users_greedy"
                    )
            
            with col_export2:
                if st.button("üóÑÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö", key="export_db_n_users_greedy", width="stretch"):
                    # –°–æ–∑–¥–∞–µ–º Excel –±—É—Ñ–µ—Ä, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
                    if 'excel_buffer_n_users_greedy' not in st.session_state:
                        with st.spinner("–°–æ–∑–¥–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞..."):
                            export_results = {
                                'waves': [{
                                    'wave_number': 1,
                                    'software_selected': results['software_count'],
                                    'software_list': list(results['software_set']),
                                    'arms_migrated': results['actual_coverage'],
                                    'arms_list': list(results['covered_arms'])
                                }],
                                'total_tested_software': results['software_count'],
                                'total_migrated_arms': results['actual_coverage'],
                                'software_wave_map': {sw: 1 for sw in results['software_set']},
                                'arm_wave_map': {arm: 1 for arm in results['covered_arms']},
                                'tested_software': results['software_set'],
                                'migrated_arms': results['covered_arms']
                            }
                            tested_software_df = st.session_state.get('tested_software_df', None)
                            tested_software_column = st.session_state.get('tested_software_column', None)
                            software_family_column = st.session_state.get('software_family_column', None)
                            excel_buffer = exporter.export_to_excel(export_results, uploaded_file.name, tested_software_df, tested_software_column, software_family_column)
                            st.session_state.excel_buffer_n_users_greedy = excel_buffer
                    
                    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                    from modal_db import show_db_export_modal
                    import os
                    from dotenv import load_dotenv
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
                    load_dotenv()
                    
                    # –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
                    def export_callback(excel_buffer, schema, table, user, password, if_exists):
                        host = os.getenv('DB_HOST', 'localhost')
                        port = os.getenv('DB_PORT', '5432')
                        database = os.getenv('DB_NAME', 'postgres')
                        exporter.export_excel_to_database(
                            excel_buffer=excel_buffer,
                            schema=schema,
                            table=table,
                            user=user,
                            password=password,
                            host=host,
                            port=port,
                            database=database,
                            if_exists=if_exists
                        )
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                    default_schema = os.getenv('DB_SCHEMA', 'public')
                    show_db_export_modal(
                        excel_buffer=st.session_state.excel_buffer_n_users_greedy,
                        filename="migration_n_users_heuristic.xlsx",
                        on_export_callback=export_callback,
                        default_schema=default_schema
                    )

    with tab4:
        st.subheader("–†–∞—Å—á—ë—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ü–û –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ N –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ—á–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º)")
        st.markdown("""
        –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∏ **—Ç–æ—á–Ω—ã–π ILP –∞–ª–≥–æ—Ä–∏—Ç–º** –Ω–∞–π–¥—ë—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –ü–û, 
        –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫—Ä—ã–≤–∞–µ—Ç –ª—é–±—ã—Ö N –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –≤–∞—à–µ–π –±–∞–∑—ã.
        
        ‚úÖ *–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ: –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ü–û. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫: –ú–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –º–µ–¥–ª–µ–Ω–Ω–µ–µ –Ω–∞ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö.*
        
        ‚ö†Ô∏è **–ö–æ–Ω—Ç—Ä–æ–ª—å –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã:** –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º –¥–æ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è.
        –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ –ª—É—á—à–µ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç –±—ã—Ç—å **–Ω–µ–æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º** 
        (—Ç.–µ. –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –±–æ–ª—å—à–µ –ü–û, —á–µ–º –≤ –∏—Å—Ç–∏–Ω–Ω–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–º —Ä–µ—à–µ–Ω–∏–∏).
        """)

        col1, col2 = st.columns([1, 2])

        with col1:
            target_users_ilp = st.number_input(
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è",
                min_value=1,
                max_value=processor.total_arms,
                value=min(100, processor.total_arms),
                help="–°–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω—É–∂–Ω–æ –ø–æ–∫—Ä—ã—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –ü–û",
                key="target_users_ilp"
            )
            
            time_limit_n_users_ilp = st.number_input(
                "–õ–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ (—Å–µ–∫)",
                min_value=0,
                max_value=13600,
                value=600,
                help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Ä–µ—à–∞—Ç–µ–ª—è (0 = –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è). –ü—Ä–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Ä–µ—à–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º.",
                key="time_limit_n_users_ilp"
            )

        if st.button("üîç –ù–∞–π—Ç–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ü–û (—Ç–æ—á–Ω—ã–π)", type="primary", key="find_min_software_ilp"):
            with st.spinner(f"–ü–æ–∏—Å–∫ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –ü–û –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è {target_users_ilp} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ—á–Ω—ã–π ILP –∞–ª–≥–æ—Ä–∏—Ç–º)..."):
                time_limit_value = time_limit_n_users_ilp if time_limit_n_users_ilp > 0 else None
                min_software, covered_arms = optimizer.find_minimum_software_for_coverage(
                    target_arms_count=target_users_ilp,
                    use_ilp=True,
                    time_limit=time_limit_value
                )
                
                st.session_state.min_coverage_results_ilp = {
                    'target_users': target_users_ilp,
                    'software_set': min_software,
                    'covered_arms': covered_arms,
                    'software_count': len(min_software),
                    'actual_coverage': len(covered_arms)
                }
                st.success("‚úì –†–∞—Å—á—ë—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!")
                st.rerun()

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if 'min_coverage_results_ilp' in st.session_state:
            results = st.session_state.min_coverage_results_ilp

            st.markdown("---")
            st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á—ë—Ç–∞")

            col1, col2, col3 = st.columns(3)

            with col1:
                st.metric(
                    "–¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ê–†–ú",
                    results['target_users']
                )

            with col2:
                st.metric(
                    "–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ü–û –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è",
                    results['software_count']
                )

            with col3:
                st.metric(
                    "–§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫—Ä—ã—Ç–æ –ê–†–ú",
                    results['actual_coverage']
                )

            # –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç–∏—è
            coverage_pct = (results['actual_coverage'] / processor.total_arms) * 100
            st.markdown("**–ü–æ–∫—Ä—ã—Ç–∏–µ –æ—Ç –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞ –ê–†–ú**")
            st.progress(results['actual_coverage'] / processor.total_arms)
            st.info(f"üìà {coverage_pct:.1f}% –æ—Ç –≤—Å–µ—Ö –ê–†–ú ({results['actual_coverage']} –∏–∑ {processor.total_arms})")

            # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            efficiency = results['actual_coverage'] / results['software_count'] if results['software_count'] > 0 else 0
            st.markdown("**–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å**")
            st.success(f"üéØ –í —Å—Ä–µ–¥–Ω–µ–º {efficiency:.1f} –ê–†–ú –Ω–∞ –æ–¥–Ω–æ –ü–û")

            # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            st.markdown("---")
            st.subheader("üìã –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
            
            # –ö–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤–≤–µ—Ä—Ö—É
            col_btn1, col_btn2 = st.columns(2)
            
            with col_btn1:
                # –≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ –ü–û
                tested_software_df = st.session_state.get('tested_software_df', None)
                tested_software_column = st.session_state.get('tested_software_column', None)
                software_family_column = st.session_state.get('software_family_column', None)
                output_sw = exporter.create_software_export(
                    list(results['software_set']),
                    tested_software_df,
                    tested_software_column,
                    processor.original_df,
                    processor.software_column,
                    software_family_column,
                    '–ü–û'
                )
                
                st.download_button(
                    label="üì¶ –°–∫–∞—á–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ü–û",
                    data=output_sw,
                    file_name="n_users_software_ilp.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    key="download_sw_n_users_ilp",
                    width="stretch"
                )
            
            with col_btn2:
                # –≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ –ê–†–ú–æ–≤
                output_arms = exporter.create_arms_export(
                    list(results['covered_arms']),
                    '–ê–†–ú'
                )
                
                st.download_button(
                    label="üë• –°–∫–∞—á–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ê–†–ú",
                    data=output_arms,
                    file_name="n_users_arms_ilp.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    key="download_arms_n_users_ilp",
                    width="stretch"
                )
            
            st.markdown("---")
            
            # –°–ø–∏—Å–∫–∏ –≤ expand–µ—Ä–µ
            with st.expander("üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–∫–∏ –ü–û –∏ –ê–†–ú"):
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown(f"**–ü–û –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ({results['software_count']})**")
                    software_list = sorted(list(results['software_set']))
                    for i, software in enumerate(software_list, 1):
                        st.text(f"{i}. {software}")
                
                with col2:
                    st.markdown(f"**–ü–æ–∫—Ä—ã—Ç—ã–µ –ê–†–ú ({results['actual_coverage']})**")
                    arms_list = sorted(list(results['covered_arms']))
                    for i, arm in enumerate(arms_list, 1):
                        st.text(f"{i}. {arm}")

            # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
            st.markdown("---")
            col_export1, col_export2 = st.columns(2)
            
            with col_export1:
                if st.button("üíæ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –≤ Excel", key="export_min_coverage_ilp", width="stretch"):
                    with st.spinner("–°–æ–∑–¥–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞..."):
                        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ, —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–º —Å export_to_excel
                        export_results = {
                            'waves': [{
                                'wave_number': 1,
                                'software_selected': results['software_count'],
                                'software_list': list(results['software_set']),
                                'arms_migrated': results['actual_coverage'],
                                'arms_list': list(results['covered_arms'])
                            }],
                            'total_tested_software': results['software_count'],
                            'total_migrated_arms': results['actual_coverage'],
                            'software_wave_map': {sw: 1 for sw in results['software_set']},
                            'arm_wave_map': {arm: 1 for arm in results['covered_arms']},
                            'tested_software': results['software_set'],
                            'migrated_arms': results['covered_arms']
                        }
                        
                        tested_software_df = st.session_state.get('tested_software_df', None)
                        tested_software_column = st.session_state.get('tested_software_column', None)
                        software_family_column = st.session_state.get('software_family_column', None)
                        excel_buffer = exporter.export_to_excel(export_results, uploaded_file.name, tested_software_df, tested_software_column, software_family_column)
                        st.session_state.excel_buffer_n_users_ilp = excel_buffer
                        st.session_state.show_download_n_users_ilp = True

                if st.session_state.get('show_download_n_users_ilp', False):
                    st.download_button(
                        label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å migration_n_users_ilp.xlsx",
                        data=st.session_state.excel_buffer_n_users_ilp,
                        file_name="migration_n_users_ilp.xlsx",
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                        key="download_btn_n_users_ilp"
                    )
            
            with col_export2:
                if st.button("üóÑÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö", key="export_db_n_users_ilp", width="stretch"):
                    # –°–æ–∑–¥–∞–µ–º Excel –±—É—Ñ–µ—Ä, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
                    if 'excel_buffer_n_users_ilp' not in st.session_state:
                        with st.spinner("–°–æ–∑–¥–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞..."):
                            export_results = {
                                'waves': [{
                                    'wave_number': 1,
                                    'software_selected': results['software_count'],
                                    'software_list': list(results['software_set']),
                                    'arms_migrated': results['actual_coverage'],
                                    'arms_list': list(results['covered_arms'])
                                }],
                                'total_tested_software': results['software_count'],
                                'total_migrated_arms': results['actual_coverage'],
                                'software_wave_map': {sw: 1 for sw in results['software_set']},
                                'arm_wave_map': {arm: 1 for arm in results['covered_arms']},
                                'tested_software': results['software_set'],
                                'migrated_arms': results['covered_arms']
                            }
                            tested_software_df = st.session_state.get('tested_software_df', None)
                            tested_software_column = st.session_state.get('tested_software_column', None)
                            software_family_column = st.session_state.get('software_family_column', None)
                            excel_buffer = exporter.export_to_excel(export_results, uploaded_file.name, tested_software_df, tested_software_column, software_family_column)
                            st.session_state.excel_buffer_n_users_ilp = excel_buffer
                    
                    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                    from modal_db import show_db_export_modal
                    import os
                    from dotenv import load_dotenv
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
                    load_dotenv()
                    
                    # –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
                    def export_callback(excel_buffer, schema, table, user, password, if_exists):
                        host = os.getenv('DB_HOST', 'localhost')
                        port = os.getenv('DB_PORT', '5432')
                        database = os.getenv('DB_NAME', 'postgres')
                        exporter.export_excel_to_database(
                            excel_buffer=excel_buffer,
                            schema=schema,
                            table=table,
                            user=user,
                            password=password,
                            host=host,
                            port=port,
                            database=database,
                            if_exists=if_exists
                        )
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                    default_schema = os.getenv('DB_SCHEMA', 'public')
                    show_db_export_modal(
                        excel_buffer=st.session_state.excel_buffer_n_users_ilp,
                        filename="migration_n_users_ilp.xlsx",
                        on_export_callback=export_callback,
                        default_schema=default_schema
                    )