"""
–û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –≤–æ–ª–Ω –º–∏–≥—Ä–∞—Ü–∏–∏ –ü–û –Ω–∞ Linux
Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—á–∏—Ö —Å—Ç–∞–Ω—Ü–∏–π
"""

import streamlit as st
import pandas as pd
import io
from typing import Dict, Set, Tuple, List
from optimizer import MigrationOptimizer
from data_processor import DataProcessor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –º–∏–≥—Ä–∞—Ü–∏–∏ –ü–û",
    page_icon="üêß",
    layout="wide"
)

st.title("üêß –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –≤–æ–ª–Ω –º–∏–≥—Ä–∞—Ü–∏–∏ –ü–û –Ω–∞ Linux")
st.markdown("""
–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–º–æ–≥–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—á–∏—Ö —Å—Ç–∞–Ω—Ü–∏–π —Å Windows –Ω–∞ Linux
–ø—É—Ç—ë–º –∞–Ω–∞–ª–∏–∑–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ü–û –∏ —Ä–∞—Å—á—ë—Ç–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –≤–æ–ª–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
""")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session_state
if 'data_loaded' not in st.session_state:
    st.session_state.data_loaded = False
if 'optimizer' not in st.session_state:
    st.session_state.optimizer = None
if 'processor' not in st.session_state:
    st.session_state.processor = None

# Sidebar –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
with st.sidebar:
    st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    st.subheader("1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    uploaded_file = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ Excel –∏–ª–∏ CSV —Ñ–∞–π–ª",
        type=['xlsx', 'xls', 'csv'],
        help="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Ç–æ–ª–±—Ü—ã —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏ –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –ü–û"
    )

    if uploaded_file is not None:
        try:
            # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            if uploaded_file.name.endswith('.csv'):
                df = pd.read_csv(uploaded_file, encoding='utf-8-sig')
            else:
                df = pd.read_excel(uploaded_file)

            st.success(f"‚úì –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {uploaded_file.name}")
            st.info(f"–°—Ç—Ä–æ–∫: {len(df)}")

            # –í—ã–±–æ—Ä —Å—Ç–æ–ª–±—Ü–æ–≤
            st.subheader("2. –í—ã–±–æ—Ä —Å—Ç–æ–ª–±—Ü–æ–≤")

            columns = df.columns.tolist()

            arm_column = st.selectbox(
                "–°—Ç–æ–ª–±–µ—Ü —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º",
                options=columns,
                index=columns.index("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.–°–µ—Ç–µ–≤–æ–µ –ò–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (—É—Å—Ç-–≤–æ, —Ö–æ—Å—Ç)")
                    if "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.–°–µ—Ç–µ–≤–æ–µ –ò–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (—É—Å—Ç-–≤–æ, —Ö–æ—Å—Ç)" in columns else 0,
                help="–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–∞–±–æ—á–µ–π —Å—Ç–∞–Ω—Ü–∏–∏ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            )

            software_column = st.selectbox(
                "–°—Ç–æ–ª–±–µ—Ü —Å –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º –ü–û",
                options=columns,
                index=columns.index("–ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ")
                    if "–ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ" in columns else 0,
                help="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è"
            )

            # –ö–Ω–æ–ø–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            if st.button("üìä –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", type="primary"):
                with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."):
                    processor = DataProcessor(df, arm_column, software_column)
                    processor.process()

                    st.session_state.processor = processor
                    st.session_state.data_loaded = True
                    st.session_state.optimizer = MigrationOptimizer(processor)

                    st.success("‚úì –î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")
                    st.rerun()

        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
if st.session_state.data_loaded:
    processor = st.session_state.processor
    optimizer = st.session_state.optimizer

    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    st.header("üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.metric("–í—Å–µ–≥–æ –ê–†–ú", processor.total_arms)
    with col2:
        st.metric("–£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –ü–û", processor.total_software)
    with col3:
        st.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–∞–±–æ—Ä–æ–≤ –ü–û", len(processor.set_to_arms_map))
    with col4:
        avg_software = sum(len(s) for s in processor.arm_software_map.values()) / len(processor.arm_software_map)
        st.metric("–°—Ä–µ–¥–Ω–µ–µ –ü–û –Ω–∞ –ê–†–ú", f"{avg_software:.1f}")

    # –í–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
    tab1, tab2, tab3, tab4 = st.tabs([
        "üéØ –†—É—á–Ω–æ–π —Ä–µ–∂–∏–º (—ç–≤—Ä–∏—Å—Ç–∏–∫–∞)", 
        "üî¨ –†—É—á–Ω–æ–π —Ä–µ–∂–∏–º (—Ç–æ—á–Ω—ã–π)", 
        "üë• –ú–∏–≥—Ä–∞—Ü–∏—è N –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—ç–≤—Ä–∏—Å—Ç–∏–∫–∞)",
        "üî¨ –ú–∏–≥—Ä–∞—Ü–∏—è N –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ—á–Ω—ã–π)"
    ])

    with tab1:
        st.subheader("–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ª–Ω –º–∏–≥—Ä–∞—Ü–∏–∏ (—ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º)")
        st.markdown("""
        –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ª–Ω –∏ –ª–∏–º–∏—Ç—ã –ü–û –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–∞–∂–¥–æ–π –≤–æ–ª–Ω–µ.
        **–≠–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º** –±—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏—Ç —Ö–æ—Ä–æ—à–µ–µ —Ä–µ—à–µ–Ω–∏–µ, –≤—ã–±–∏—Ä–∞—è –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –ü–û.
        """)

        col1, col2 = st.columns([1, 2])

        with col1:
            num_waves_greedy = st.number_input(
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ª–Ω",
                min_value=1,
                max_value=10,
                value=3,
                help="–°–∫–æ–ª—å–∫–æ –≤–æ–ª–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è",
                key="num_waves_greedy"
            )

        st.markdown("**–õ–∏–º–∏—Ç—ã –ü–û –¥–ª—è –∫–∞–∂–¥–æ–π –≤–æ–ª–Ω—ã:**")

        wave_limits_greedy = []
        cols = st.columns(min(num_waves_greedy, 3))
        for i in range(num_waves_greedy):
            col_idx = i % 3
            with cols[col_idx]:
                limit = st.number_input(
                    f"–í–æ–ª–Ω–∞ {i+1}",
                    min_value=1,
                    max_value=processor.total_software,
                    value=min(100, processor.total_software),
                    key=f"wave_limit_greedy_{i}"
                )
                wave_limits_greedy.append(limit)

        if st.button("üöÄ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤–æ–ª–Ω—ã (—ç–≤—Ä–∏—Å—Ç–∏–∫–∞)", type="primary", key="calc_greedy"):
            with st.spinner("–†–∞—Å—á—ë—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –≤–æ–ª–Ω –º–∏–≥—Ä–∞—Ü–∏–∏ (—ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º)..."):
                results = optimizer.calculate_waves(wave_limits_greedy, use_ilp=False)
                st.session_state.wave_results_greedy = results
                st.success("‚úì –†–∞—Å—á—ë—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!")
                st.rerun()

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if 'wave_results_greedy' in st.session_state:
            results = st.session_state.wave_results_greedy

            st.markdown("---")
            st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á—ë—Ç–∞")

            # –¢–∞–±–ª–∏—Ü–∞ –ø–æ –≤–æ–ª–Ω–∞–º
            wave_stats = []
            cumulative_arms = 0
            cumulative_software = 0

            for i, wave_data in enumerate(results['waves']):
                cumulative_arms += wave_data['arms_migrated']
                cumulative_software += wave_data['software_selected']

                wave_stats.append({
                    '–í–æ–ª–Ω–∞': i + 1,
                    '–õ–∏–º–∏—Ç –ü–û': wave_limits_greedy[i],
                    '–í—ã–±—Ä–∞–Ω–æ –ü–û': wave_data['software_selected'],
                    '–ê–†–ú –≤ –≤–æ–ª–Ω–µ': wave_data['arms_migrated'],
                    '–ê–†–ú –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ': cumulative_arms
                })

            # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
            wave_stats.append({
                '–í–æ–ª–Ω–∞': '–í—Å–µ–≥–æ',
                '–õ–∏–º–∏—Ç –ü–û': sum(wave_limits_greedy),
                '–í—ã–±—Ä–∞–Ω–æ –ü–û': cumulative_software,
                '–ê–†–ú –≤ –≤–æ–ª–Ω–µ': '-',
                '–ê–†–ú –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ': cumulative_arms
            })

            st.dataframe(
                pd.DataFrame(wave_stats),
                use_container_width=True,
                hide_index=True
            )

            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
            col1, col2 = st.columns(2)

            with col1:
                st.markdown("**–ü–æ–∫—Ä—ã—Ç–∏–µ –ê–†–ú**")
                coverage_pct = (cumulative_arms / processor.total_arms) * 100
                st.progress(cumulative_arms / processor.total_arms)
                st.metric(
                    "–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç–∏—è",
                    f"{coverage_pct:.1f}%",
                    f"{cumulative_arms} –∏–∑ {processor.total_arms} –ê–†–ú"
                )

            with col2:
                st.markdown("**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ü–û**")
                software_pct = (cumulative_software / processor.total_software) * 100
                st.progress(cumulative_software / processor.total_software)
                st.metric(
                    "–ü–û –≤ –ø–ª–∞–Ω–µ",
                    f"{software_pct:.1f}%",
                    f"{cumulative_software} –∏–∑ {processor.total_software} –ü–û"
                )

            # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
            st.markdown("---")
            if st.button("üíæ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Excel", key="export_greedy"):
                with st.spinner("–°–æ–∑–¥–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞..."):
                    excel_buffer = optimizer.export_to_excel(results, uploaded_file.name)

                    st.download_button(
                        label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å migration_plan_result_greedy.xlsx",
                        data=excel_buffer,
                        file_name="migration_plan_result_greedy.xlsx",
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                    )

    with tab2:
        st.subheader("–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ª–Ω –º–∏–≥—Ä–∞—Ü–∏–∏ (—Ç–æ—á–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º)")
        st.markdown("""
        –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ª–Ω –∏ –ª–∏–º–∏—Ç—ã –ü–û –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–∞–∂–¥–æ–π –≤–æ–ª–Ω–µ.
        **–¢–æ—á–Ω—ã–π ILP –∞–ª–≥–æ—Ä–∏—Ç–º** –Ω–∞—Ö–æ–¥–∏—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –Ω–æ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –º–µ–¥–ª–µ–Ω–Ω–µ–µ –Ω–∞ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö.
        """)

        col1, col2 = st.columns([1, 2])

        with col1:
            num_waves_ilp = st.number_input(
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ª–Ω",
                min_value=1,
                max_value=10,
                value=3,
                help="–°–∫–æ–ª—å–∫–æ –≤–æ–ª–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è",
                key="num_waves_ilp"
            )

        st.markdown("**–õ–∏–º–∏—Ç—ã –ü–û –¥–ª—è –∫–∞–∂–¥–æ–π –≤–æ–ª–Ω—ã:**")

        wave_limits_ilp = []
        cols = st.columns(min(num_waves_ilp, 3))
        for i in range(num_waves_ilp):
            col_idx = i % 3
            with cols[col_idx]:
                limit = st.number_input(
                    f"–í–æ–ª–Ω–∞ {i+1}",
                    min_value=1,
                    max_value=processor.total_software,
                    value=min(100, processor.total_software),
                    key=f"wave_limit_ilp_{i}"
                )
                wave_limits_ilp.append(limit)

        if st.button("üöÄ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤–æ–ª–Ω—ã (—Ç–æ—á–Ω—ã–π)", type="primary", key="calc_ilp"):
            with st.spinner("–†–∞—Å—á—ë—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –≤–æ–ª–Ω –º–∏–≥—Ä–∞—Ü–∏–∏ (—Ç–æ—á–Ω—ã–π ILP –∞–ª–≥–æ—Ä–∏—Ç–º)..."):
                results = optimizer.calculate_waves(wave_limits_ilp, use_ilp=True)
                st.session_state.wave_results_ilp = results
                st.success("‚úì –†–∞—Å—á—ë—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!")
                st.rerun()

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if 'wave_results_ilp' in st.session_state:
            results = st.session_state.wave_results_ilp

            st.markdown("---")
            st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á—ë—Ç–∞")

            # –¢–∞–±–ª–∏—Ü–∞ –ø–æ –≤–æ–ª–Ω–∞–º
            wave_stats = []
            cumulative_arms = 0
            cumulative_software = 0

            for i, wave_data in enumerate(results['waves']):
                cumulative_arms += wave_data['arms_migrated']
                cumulative_software += wave_data['software_selected']

                wave_stats.append({
                    '–í–æ–ª–Ω–∞': i + 1,
                    '–õ–∏–º–∏—Ç –ü–û': wave_limits_ilp[i],
                    '–í—ã–±—Ä–∞–Ω–æ –ü–û': wave_data['software_selected'],
                    '–ê–†–ú –≤ –≤–æ–ª–Ω–µ': wave_data['arms_migrated'],
                    '–ê–†–ú –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ': cumulative_arms
                })

            # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
            wave_stats.append({
                '–í–æ–ª–Ω–∞': '–í—Å–µ–≥–æ',
                '–õ–∏–º–∏—Ç –ü–û': sum(wave_limits_ilp),
                '–í—ã–±—Ä–∞–Ω–æ –ü–û': cumulative_software,
                '–ê–†–ú –≤ –≤–æ–ª–Ω–µ': '-',
                '–ê–†–ú –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ': cumulative_arms
            })

            st.dataframe(
                pd.DataFrame(wave_stats),
                use_container_width=True,
                hide_index=True
            )

            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
            col1, col2 = st.columns(2)

            with col1:
                st.markdown("**–ü–æ–∫—Ä—ã—Ç–∏–µ –ê–†–ú**")
                coverage_pct = (cumulative_arms / processor.total_arms) * 100
                st.progress(cumulative_arms / processor.total_arms)
                st.metric(
                    "–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç–∏—è",
                    f"{coverage_pct:.1f}%",
                    f"{cumulative_arms} –∏–∑ {processor.total_arms} –ê–†–ú"
                )

            with col2:
                st.markdown("**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ü–û**")
                software_pct = (cumulative_software / processor.total_software) * 100
                st.progress(cumulative_software / processor.total_software)
                st.metric(
                    "–ü–û –≤ –ø–ª–∞–Ω–µ",
                    f"{software_pct:.1f}%",
                    f"{cumulative_software} –∏–∑ {processor.total_software} –ü–û"
                )

            # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
            st.markdown("---")
            if st.button("üíæ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Excel", key="export_ilp"):
                with st.spinner("–°–æ–∑–¥–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞..."):
                    excel_buffer = optimizer.export_to_excel(results, uploaded_file.name)

                    st.download_button(
                        label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å migration_plan_result_ilp.xlsx",
                        data=excel_buffer,
                        file_name="migration_plan_result_ilp.xlsx",
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                    )

    with tab3:
        st.subheader("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        st.markdown("""
        –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö –≤–æ–ª–Ω –º–∏–≥—Ä–∞—Ü–∏–∏.
        """)

        if st.button("ü§ñ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", type="primary"):
            with st.spinner("–†–∞—Å—á—ë—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π..."):
                auto_results = optimizer.calculate_auto_recommendations()
                st.session_state.auto_results = auto_results
                st.success("‚úì –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≥–æ—Ç–æ–≤—ã!")
                st.rerun()

        if 'auto_results' in st.session_state:
            auto = st.session_state.auto_results

            st.markdown("---")

            # –í–æ–ª–Ω–∞ 1
            st.subheader("üåä –í–æ–ª–Ω–∞ 1")
            col1, col2 = st.columns(2)

            with col1:
                st.markdown("**–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä (20% –ê–†–ú)**")
                st.metric("–ü–û –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", auto['wave1_min']['software_count'])
                st.metric("–ê–†–ú –º–∏–≥—Ä–∏—Ä—É–µ—Ç", auto['wave1_min']['arms_count'])

            with col2:
                st.markdown("**–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä (100 –ü–û)**")
                st.metric("–ü–û –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", auto['wave1_opt']['software_count'])
                st.metric("–ê–†–ú –º–∏–≥—Ä–∏—Ä—É–µ—Ç", auto['wave1_opt']['arms_count'])

            # –í–æ–ª–Ω–∞ 2
            st.subheader("üåä –í–æ–ª–Ω–∞ 2 (–ø–æ—Å–ª–µ –í–æ–ª–Ω—ã 1 –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π)")
            col1, col2 = st.columns(2)

            with col1:
                st.markdown("**–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä (100 –ü–û)**")
                st.metric("–ü–û –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", auto['wave2_opt']['software_count'])
                st.metric("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ê–†–ú", auto['wave2_opt']['arms_count'])

            with col2:
                st.markdown("**–ò—Ç–æ–≥–æ –∑–∞ 2 –≤–æ–ª–Ω—ã**")
                total_software = auto['wave1_opt']['software_count'] + auto['wave2_opt']['software_count']
                total_arms = auto['wave1_opt']['arms_count'] + auto['wave2_opt']['arms_count']
                st.metric("–í—Å–µ–≥–æ –ü–û", total_software)
                st.metric("–í—Å–µ–≥–æ –ê–†–ú", total_arms)

    with tab3:
        st.subheader("–†–∞—Å—á—ë—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ü–û –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ N –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º)")
        st.markdown("""
        –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∏ **—ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º** –±—ã—Å—Ç—Ä–æ –Ω–∞–π–¥—ë—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –ü–û, 
        –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫—Ä—ã–≤–∞–µ—Ç –ª—é–±—ã—Ö N –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –≤–∞—à–µ–π –±–∞–∑—ã.
        """)

        col1, col2 = st.columns([1, 2])

        with col1:
            target_users_greedy = st.number_input(
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è",
                min_value=1,
                max_value=processor.total_arms,
                value=min(100, processor.total_arms),
                help="–°–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω—É–∂–Ω–æ –ø–æ–∫—Ä—ã—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –ü–û",
                key="target_users_greedy"
            )

        if st.button("üîç –ù–∞–π—Ç–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ü–û (—ç–≤—Ä–∏—Å—Ç–∏–∫–∞)", type="primary", key="find_min_software_greedy"):
            with st.spinner(f"–ü–æ–∏—Å–∫ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –ü–û –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è {target_users_greedy} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º)..."):
                min_software, covered_arms = optimizer.find_minimum_software_for_coverage(
                    target_arms_count=target_users_greedy,
                    use_ilp=False
                )
                
                st.session_state.min_coverage_results_greedy = {
                    'target_users': target_users_greedy,
                    'software_set': min_software,
                    'covered_arms': covered_arms,
                    'software_count': len(min_software),
                    'actual_coverage': len(covered_arms)
                }
                st.success("‚úì –†–∞—Å—á—ë—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!")
                st.rerun()

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if 'min_coverage_results_greedy' in st.session_state:
            results = st.session_state.min_coverage_results_greedy

            st.markdown("---")
            st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á—ë—Ç–∞")

            col1, col2, col3 = st.columns(3)

            with col1:
                st.metric(
                    "–¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ê–†–ú",
                    results['target_users']
                )

            with col2:
                st.metric(
                    "–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ü–û –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è",
                    results['software_count']
                )

            with col3:
                st.metric(
                    "–§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫—Ä—ã—Ç–æ –ê–†–ú",
                    results['actual_coverage']
                )

            # –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç–∏—è
            coverage_pct = (results['actual_coverage'] / processor.total_arms) * 100
            st.markdown("**–ü–æ–∫—Ä—ã—Ç–∏–µ –æ—Ç –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞ –ê–†–ú**")
            st.progress(results['actual_coverage'] / processor.total_arms)
            st.info(f"üìà {coverage_pct:.1f}% –æ—Ç –≤—Å–µ—Ö –ê–†–ú ({results['actual_coverage']} –∏–∑ {processor.total_arms})")

            # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            efficiency = results['actual_coverage'] / results['software_count'] if results['software_count'] > 0 else 0
            st.markdown("**–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å**")
            st.success(f"üéØ –í —Å—Ä–µ–¥–Ω–µ–º {efficiency:.1f} –ê–†–ú –Ω–∞ –æ–¥–Ω–æ –ü–û")

            # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            with st.expander("üìã –°–ø–∏—Å–æ–∫ –ü–û –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"):
                software_list = sorted(list(results['software_set']))
                for i, software in enumerate(software_list, 1):
                    st.text(f"{i}. {software}")

            with st.expander("üë• –°–ø–∏—Å–æ–∫ –ø–æ–∫—Ä—ã—Ç—ã—Ö –ê–†–ú"):
                arms_list = sorted(list(results['covered_arms']))
                for i, arm in enumerate(arms_list, 1):
                    st.text(f"{i}. {arm}")

    with tab4:
        st.subheader("–†–∞—Å—á—ë—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ü–û –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ N –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ—á–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º)")
        st.markdown("""
        –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∏ **—Ç–æ—á–Ω—ã–π ILP –∞–ª–≥–æ—Ä–∏—Ç–º** –Ω–∞–π–¥—ë—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –ü–û, 
        –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫—Ä—ã–≤–∞–µ—Ç –ª—é–±—ã—Ö N –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –≤–∞—à–µ–π –±–∞–∑—ã.
        """)

        col1, col2 = st.columns([1, 2])

        with col1:
            target_users_ilp = st.number_input(
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è",
                min_value=1,
                max_value=processor.total_arms,
                value=min(100, processor.total_arms),
                help="–°–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω—É–∂–Ω–æ –ø–æ–∫—Ä—ã—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –ü–û",
                key="target_users_ilp"
            )

        if st.button("üîç –ù–∞–π—Ç–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ü–û (—Ç–æ—á–Ω—ã–π)", type="primary", key="find_min_software_ilp"):
            with st.spinner(f"–ü–æ–∏—Å–∫ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –ü–û –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è {target_users_ilp} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ—á–Ω—ã–π ILP –∞–ª–≥–æ—Ä–∏—Ç–º)..."):
                min_software, covered_arms = optimizer.find_minimum_software_for_coverage(
                    target_arms_count=target_users_ilp,
                    use_ilp=True
                )
                
                st.session_state.min_coverage_results_ilp = {
                    'target_users': target_users_ilp,
                    'software_set': min_software,
                    'covered_arms': covered_arms,
                    'software_count': len(min_software),
                    'actual_coverage': len(covered_arms)
                }
                st.success("‚úì –†–∞—Å—á—ë—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!")
                st.rerun()

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if 'min_coverage_results_ilp' in st.session_state:
            results = st.session_state.min_coverage_results_ilp

            st.markdown("---")
            st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á—ë—Ç–∞")

            col1, col2, col3 = st.columns(3)

            with col1:
                st.metric(
                    "–¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ê–†–ú",
                    results['target_users']
                )

            with col2:
                st.metric(
                    "–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ü–û –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è",
                    results['software_count']
                )

            with col3:
                st.metric(
                    "–§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫—Ä—ã—Ç–æ –ê–†–ú",
                    results['actual_coverage']
                )

            # –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç–∏—è
            coverage_pct = (results['actual_coverage'] / processor.total_arms) * 100
            st.markdown("**–ü–æ–∫—Ä—ã—Ç–∏–µ –æ—Ç –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞ –ê–†–ú**")
            st.progress(results['actual_coverage'] / processor.total_arms)
            st.info(f"üìà {coverage_pct:.1f}% –æ—Ç –≤—Å–µ—Ö –ê–†–ú ({results['actual_coverage']} –∏–∑ {processor.total_arms})")

            # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            efficiency = results['actual_coverage'] / results['software_count'] if results['software_count'] > 0 else 0
            st.markdown("**–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å**")
            st.success(f"üéØ –í —Å—Ä–µ–¥–Ω–µ–º {efficiency:.1f} –ê–†–ú –Ω–∞ –æ–¥–Ω–æ –ü–û")

            # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            with st.expander("üìã –°–ø–∏—Å–æ–∫ –ü–û –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"):
                software_list = sorted(list(results['software_set']))
                for i, software in enumerate(software_list, 1):
                    st.text(f"{i}. {software}")

            with st.expander("üë• –°–ø–∏—Å–æ–∫ –ø–æ–∫—Ä—ã—Ç—ã—Ö –ê–†–ú"):
                arms_list = sorted(list(results['covered_arms']))
                for i, arm in enumerate(arms_list, 1):
                    st.text(f"{i}. {arm}")

else:
    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
    st.info("üëà –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")

    st.markdown("""
    ### –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:

    1. **–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª** - Excel (.xlsx) –∏–ª–∏ CSV —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–± —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–º –ü–û
    2. **–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±—Ü—ã** - —É–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏ –∏ —Å—Ç–æ–ª–±–µ—Ü —Å –ü–û
    3. **–û–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –¥–∞–Ω–Ω—ã–µ** - –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    4. **–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º**:
       - **–†—É—á–Ω–æ–π** - –∑–∞–¥–∞–π—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ª–Ω –∏ –ª–∏–º–∏—Ç—ã
       - **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π** - –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã
    5. **–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã** - —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –ø–ª–∞–Ω –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ Excel

    ### –§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö:

    –§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞:
    - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ü–û
    """)