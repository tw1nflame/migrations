"""
–ú–æ–¥—É–ª—å –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
–°–æ–¥–µ—Ä–∂–∏—Ç UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
"""

import streamlit as st


@st.dialog("–≠–∫—Å–ø–æ—Ä—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö PostgreSQL", width="large")
def show_db_export_modal(excel_buffer, filename: str, on_export_callback, default_schema: str = "public"):
    """
    –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –≤ PostgreSQL
    
    Args:
        excel_buffer: BytesIO –æ–±—ä–µ–∫—Ç —Å Excel —Ñ–∞–π–ª–æ–º
        filename: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        on_export_callback: –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ (exporter, schema, table, user, password, host, port)
        default_schema: –°—Ö–µ–º–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (—á–∏—Ç–∞–µ—Ç—Å—è –∏–∑ .env)
    """
    st.markdown(f"**–§–∞–π–ª –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:** `{filename}`")
    st.markdown("---")
    
    # –ü–æ–ª—è –≤–≤–æ–¥–∞
    st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
    
    col1, col2 = st.columns(2)
    
    with col1:
        schema = st.text_input(
            "–°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
            value=default_schema,
            placeholder="public",
            help="–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ö–µ–º—ã –≤ PostgreSQL (–Ω–∞–ø—Ä–∏–º–µ—Ä: public, migration, etc.)"
        )
        
        user = st.text_input(
            "–õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ë–î",
            placeholder="postgres",
            help="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
        )
    
    with col2:
        table = st.text_input(
            "–ò–º—è —Ç–∞–±–ª–∏—Ü—ã",
            placeholder="migration_data",
            help="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã, –≤ –∫–æ—Ç–æ—Ä—É—é –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ"
        )
        
        password = st.text_input(
            "–ü–∞—Ä–æ–ª—å",
            type="password",
            placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢",
            help="–ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ë–î"
        )
    
    st.markdown("---")
    
    # –¢–∞–±–ª–∏—Ü–∞ –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–∑–∞—Ç–∏—Ä–∞–µ—Ç—Å—è
    if_exists = 'replace'
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    col_btn1, col_btn2, col_btn3 = st.columns([2, 1, 1])
    
    with col_btn1:
        st.markdown("")  # –û—Ç—Å—Ç—É–ø
    
    with col_btn2:
        if st.button("–û—Ç–º–µ–Ω–∞", width="stretch"):
            st.rerun()
    
    with col_btn3:
        export_clicked = st.button("–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å", width="stretch")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ (–≤–Ω–µ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –ø–æ–ª–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
    if export_clicked:
        print(f"\n{'='*70}")
        print(f"üîò –ö–ù–û–ü–ö–ê '–≠–ö–°–ü–û–†–¢–ò–†–û–í–ê–¢–¨' –ù–ê–ñ–ê–¢–ê –í –ú–û–î–ê–õ–¨–ù–û–ú –û–ö–ù–ï")
        print(f"{'='*70}")
        print(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Ñ–æ—Ä–º—ã:")
        print(f"  - schema: '{schema}' (type: {type(schema).__name__})")
        print(f"  - table: '{table}' (type: {type(table).__name__})")
        print(f"  - user: '{user}' (type: {type(user).__name__})")
        print(f"  - password: {'*' * len(password) if password else 'EMPTY'} (type: {type(password).__name__})")
        print(f"  - if_exists: '{if_exists}'")
        print(f"  - excel_buffer: {type(excel_buffer).__name__}, size: {excel_buffer.getbuffer().nbytes if hasattr(excel_buffer, 'getbuffer') else 'unknown'} bytes")
        print(f"{'='*70}\n")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–µ–π
        errors = []
        
        if not schema or not schema.strip():
            errors.append("–ù–µ —É–∫–∞–∑–∞–Ω–∞ —Å—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        if not table or not table.strip():
            errors.append("–ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è —Ç–∞–±–ª–∏—Ü—ã")
        if not user or not user.strip():
            errors.append("–ù–µ —É–∫–∞–∑–∞–Ω –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        if not password:
            errors.append("–ù–µ —É–∫–∞–∑–∞–Ω –ø–∞—Ä–æ–ª—å")
        
        if errors:
            print(f"‚ùå –û–®–ò–ë–ö–ò –í–ê–õ–ò–î–ê–¶–ò–ò:")
            for error in errors:
                print(f"   - {error}")
                st.error(f"‚ùå {error}")
        else:
            print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–µ–π –ø—Ä–æ–π–¥–µ–Ω–∞, –≤—ã–∑—ã–≤–∞–µ–º callback...\n")
            # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
            try:
                with st.spinner("–≠–∫—Å–ø–æ—Ä—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö..."):
                    print(f"üöÄ –í–´–ó–û–í on_export_callback...")
                    on_export_callback(
                        excel_buffer=excel_buffer,
                        schema=schema.strip(),
                        table=table.strip(),
                        user=user.strip(),
                        password=password,
                        if_exists=if_exists
                    )
                    print(f"‚úÖ Callback –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n")
                st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
            except Exception as e:
                print(f"\n‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï –í –ú–û–î–ê–õ–¨–ù–û–ú –û–ö–ù–ï:")
                print(f"   –¢–∏–ø: {type(e).__name__}")
                print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")
                import traceback
                print(f"   Traceback:\n{traceback.format_exc()}")
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {str(e)}")
